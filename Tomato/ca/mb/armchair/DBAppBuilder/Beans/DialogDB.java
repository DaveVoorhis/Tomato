package ca.mb.armchair.DBAppBuilder.Beans;

/*
 * DialogDatabases.java
 *
 * Created on December 14, 2001, 12:07 AM
 */

import java.io.*;
import javax.swing.*;
import java.util.*;
import java.awt.*;

/**
 *
 * @author  creatist
 */
public class DialogDB extends javax.swing.JDialog {

    /** Creates new form DialogDatabases */
    public DialogDB() {
        initComponents();
        refreshDisplay();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jButtonNew = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonProperties = new javax.swing.JButton();
        jButtonRemove = new javax.swing.JButton();
        jButtonTest = new javax.swing.JButton();
        jButtonSaveAsDefault = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListDatabases = new javax.swing.JList();

        setTitle("Databases");
        setModal(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jSplitPane1.setDividerLocation(350);
        jSplitPane1.setPreferredSize(new java.awt.Dimension(500, 200));
        jSplitPane1.setMinimumSize(new java.awt.Dimension(500, 200));
        jPanel1.setLayout(new java.awt.GridLayout(7, 1));

        jPanel1.setPreferredSize(new java.awt.Dimension(170, 161));
        jPanel1.setMinimumSize(new java.awt.Dimension(155, 161));
        jButtonNew.setToolTipText("Create a new database and add it to the list");
        jButtonNew.setMnemonic('n');
        jButtonNew.setText("New");
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doNew(evt);
            }
        });

        jPanel1.add(jButtonNew);

        jButtonAdd.setToolTipText("Add an existing database to the list");
        jButtonAdd.setMnemonic('a');
        jButtonAdd.setText("Add");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doAdd(evt);
            }
        });

        jPanel1.add(jButtonAdd);

        jButtonProperties.setToolTipText("Change the properties of a database connection");
        jButtonProperties.setMnemonic('p');
        jButtonProperties.setText("Properties");
        jButtonProperties.setEnabled(false);
        jButtonProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doProperties(evt);
            }
        });

        jPanel1.add(jButtonProperties);

        jButtonRemove.setToolTipText("Remove a database from the list");
        jButtonRemove.setText("Remove");
        jButtonRemove.setEnabled(false);
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doRemove(evt);
            }
        });

        jPanel1.add(jButtonRemove);

        jButtonTest.setToolTipText("Test a database connection");
        jButtonTest.setMnemonic('t');
        jButtonTest.setText("Test");
        jButtonTest.setEnabled(false);
        jButtonTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doTest(evt);
            }
        });

        jPanel1.add(jButtonTest);

        jButtonSaveAsDefault.setToolTipText("Use the selected connection's settings for all unspecified database connections.");
        jButtonSaveAsDefault.setText("Save as Default");
        jButtonSaveAsDefault.setEnabled(false);
        jButtonSaveAsDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doSaveAsDefault(evt);
            }
        });

        jPanel1.add(jButtonSaveAsDefault);

        jButtonExit.setToolTipText("Exit from this window");
        jButtonExit.setMnemonic('x');
        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doExit(evt);
            }
        });

        jPanel1.add(jButtonExit);

        jSplitPane1.setRightComponent(jPanel1);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(230, 131));
        jListDatabases.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ListValueChanged(evt);
            }
        });

        jScrollPane1.setViewportView(jListDatabases);

        jSplitPane1.setLeftComponent(jScrollPane1);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void doSaveAsDefault(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doSaveAsDefault
        if ((databases.getDatabaseConnectionFromSelection(jListDatabases)).saveDefault())
            JOptionPane.showMessageDialog(null, "Default saved", "Notice", JOptionPane.INFORMATION_MESSAGE);
        else
            JOptionPane.showMessageDialog(null, "Unable to save default", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_doSaveAsDefault

    /** Set available buttons based on list selection status */
    private void ListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ListValueChanged
        boolean selectionActive = (jListDatabases.getSelectedIndex()!=-1);
        jButtonProperties.setEnabled(selectionActive);
        jButtonTest.setEnabled(selectionActive);
        jButtonRemove.setEnabled(selectionActive);
        jButtonSaveAsDefault.setEnabled(selectionActive);
    }//GEN-LAST:event_ListValueChanged

    private void doExit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doExit
        setVisible(false);
        dispose();
    }//GEN-LAST:event_doExit

    /** Return the currently selected databaseConnection.  Return null if none selected. */
    public DatabaseConnection getSelectedConnection() {
         return databases.getDatabaseConnectionFromSelection(jListDatabases);
    }
    
    /** Test the currently selected databaseConnection. */
    private void doTest(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doTest
        String msg=databases.testConnection(jListDatabases.getSelectedIndex());
        new DialogLongString(msg).show();
    }//GEN-LAST:event_doTest

    /** Change the properties of the currently selected databaseConnection. */
    private void doProperties(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doProperties
        int index = jListDatabases.getSelectedIndex();
        if (index!=-1)
        {
            DialogDBSelect dbDlg=new DialogDBSelect(getSelectedConnection());
            dbDlg.show();
            DatabaseConnection dbC = dbDlg.getDatabaseConnection();
            if (dbC!=null) {
                databases.replace(index,dbC);
                refreshDisplay();
            }
        }
    }//GEN-LAST:event_doProperties

    /** Remove the currently selected databaseConnection */
    private void doRemove(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doRemove
        int index = jListDatabases.getSelectedIndex();
        if (index!=-1)
        {
            databases.remove(index);
            refreshDisplay();
        }
    }//GEN-LAST:event_doRemove
            
    /** Refresh the display from saved collection of databases */
    private void refreshDisplay() {
        jListDatabases.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jListDatabases.setModel(databases.getListModel());
    }
    
    /** Add a connection */
    private void doAdd(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doAdd
        DialogDBSelect dbDlg=new DialogDBSelect();
        dbDlg.show();
        DatabaseConnection dbC = dbDlg.getDatabaseConnection();
        if (dbC!=null) {
            databases.add(dbC);
            refreshDisplay();
        }
    }//GEN-LAST:event_doAdd

    /** Create a new database.  Add as new connection. */
    private void doNew(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doNew
        DialogDBCreate dbDlg=new DialogDBCreate();
        dbDlg.show();
        DatabaseConnection dbC = dbDlg.getDatabaseConnection();
        if (dbC!=null) {
            databases.add(dbC);
            refreshDisplay();
        }
    }//GEN-LAST:event_doNew

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    /** Collection of databases */
    private DatabaseConnections databases = new DatabaseConnections();
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonSaveAsDefault;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JList jListDatabases;
    private javax.swing.JButton jButtonProperties;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jButtonTest;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables

}
